colv30 <- grep(stringv30, names(gene), value = TRUE)
colv31 <- grep(stringv31, names(gene), value = TRUE)
colv32 <- grep(stringv32, names(gene), value = TRUE)
colv33 <- grep(stringv33, names(gene), value = TRUE)
colv34 <- grep(stringv34, names(gene), value = TRUE)
colv35 <- grep(stringv35, names(gene), value = TRUE)
colv36 <- grep(stringv36, names(gene), value = TRUE)
colv37 <- grep(stringv37, names(gene), value = TRUE)
colv38 <- grep(stringv38, names(gene), value = TRUE)
colv39 <- grep(stringv39, names(gene), value = TRUE)
colv40 <- grep(stringv40, names(gene), value = TRUE)
colv41 <- grep(stringv41, names(gene), value = TRUE)
colv42 <- grep(stringv42, names(gene), value = TRUE)
colv43 <- grep(stringv43, names(gene), value = TRUE)
colv44 <- grep(stringv44, names(gene), value = TRUE)
colv45 <- grep(stringv45, names(gene), value = TRUE)
colv46 <- grep(stringv46, names(gene), value = TRUE)
colv47 <- grep(stringv47, names(gene), value = TRUE)
colv48 <- grep(stringv48, names(gene), value = TRUE)
colv49 <- grep(stringv49, names(gene), value = TRUE)
colv50 <- grep(stringv50, names(gene), value = TRUE)
# j gene
colj1 <- grep(stringj1, names(gene), value = TRUE)
colj2 <- grep(stringj2, names(gene), value = TRUE)
colj3 <- grep(stringj3, names(gene), value = TRUE)
colj4 <- grep(stringj4, names(gene), value = TRUE)
colj5 <- grep(stringj5, names(gene), value = TRUE)
colj6 <- grep(stringj6, names(gene), value = TRUE)
colj7 <- grep(stringj7, names(gene), value = TRUE)
colj8 <- grep(stringj8, names(gene), value = TRUE)
colj9 <- grep(stringj9, names(gene), value = TRUE)
colj10 <- grep(stringj10, names(gene), value = TRUE)
colj11 <- grep(stringj11, names(gene), value = TRUE)
colj12 <- grep(stringj12, names(gene), value = TRUE)
colj13 <- grep(stringj13, names(gene), value = TRUE)
# v gene
subv1 <- as.matrix(gene[, colv1])
subv2 <- as.matrix(gene[, colv2])
subv3 <- as.matrix(gene[, colv3])
subv4 <- as.matrix(gene[, colv4])
subv5 <- as.matrix(gene[, colv5])
subv6 <- as.matrix(gene[, colv6])
subv7 <- as.matrix(gene[, colv7])
subv8 <- as.matrix(gene[, colv8])
subv9 <- as.matrix(gene[, colv9])
subv10 <- as.matrix(gene[, colv10])
subv11 <- as.matrix(gene[, colv11])
subv12 <- as.matrix(gene[, colv12])
subv13 <- as.matrix(gene[, colv13])
subv14 <- as.matrix(gene[, colv14])
subv15 <- as.matrix(gene[, colv15])
subv16 <- as.matrix(gene[, colv16])
subv17 <- as.matrix(gene[, colv17])
subv18 <- as.matrix(gene[, colv18])
subv19 <- as.matrix(gene[, colv19])
subv20 <- as.matrix(gene[, colv20])
subv21 <- as.matrix(gene[, colv21])
subv22 <- as.matrix(gene[, colv22])
subv23 <- as.matrix(gene[, colv23])
subv24 <- as.matrix(gene[, colv24])
subv25 <- as.matrix(gene[, colv25])
subv26 <- as.matrix(gene[, colv26])
subv27 <- as.matrix(gene[, colv27])
subv28 <- as.matrix(gene[, colv28])
subv29 <- as.matrix(gene[, colv29])
subv30 <- as.matrix(gene[, colv30])
subv31 <- as.matrix(gene[, colv31])
subv32 <- as.matrix(gene[, colv32])
subv33 <- as.matrix(gene[, colv33])
subv34 <- as.matrix(gene[, colv34])
subv35 <- as.matrix(gene[, colv35])
subv36 <- as.matrix(gene[, colv36])
subv37 <- as.matrix(gene[, colv37])
subv38 <- as.matrix(gene[, colv38])
subv39 <- as.matrix(gene[, colv39])
subv40 <- as.matrix(gene[, colv40])
subv41 <- as.matrix(gene[, colv41])
subv42 <- as.matrix(gene[, colv42])
subv43 <- as.matrix(gene[, colv43])
subv44 <- as.matrix(gene[, colv44])
subv45 <- as.matrix(gene[, colv45])
subv46 <- as.matrix(gene[, colv46])
subv47 <- as.matrix(gene[, colv47])
subv48 <- as.matrix(gene[, colv48])
subv49 <- as.matrix(gene[, colv49])
subv50 <- as.matrix(gene[, colv50])
# j gene
subj1 <- as.matrix(gene[, colj1])
subj2 <- as.matrix(gene[, colj2])
subj3 <- as.matrix(gene[, colj3])
subj4 <- as.matrix(gene[, colj4])
subj5 <- as.matrix(gene[, colj5])
subj6 <- as.matrix(gene[, colj6])
subj7 <- as.matrix(gene[, colj7])
subj8 <- as.matrix(gene[, colj8])
subj9 <- as.matrix(gene[, colj9])
subj10 <- as.matrix(gene[, colj10])
subj11 <- as.matrix(gene[, colj11])
subj12 <- as.matrix(gene[, colj12])
subj13 <- as.matrix(gene[, colj13])
set.na1 <- c(22)
set.na2 <- c(94:109)
Y <- gene$Y
Y[set.na1] <- "disease"
Y[set.na2] <- "healthy"
one.vec <- rep(1,length(Y))
Y.d <- rep(0, length(Y))
Y.d[which(Y == "disease")] = 1
obj.s <- SKAT_Null_Model(Y.d ~ 1, out_type = "D")
# vectors
pvalue.vec <- rep(0,50)
pval <- rep(0,13)
# v gene
for (i in 1:50) {
sub <- get(paste0("subv", i))
out <- SKATBinary(sub, obj.s, kernel = "linear.weighted")
p <- out$p.value
pvalue.vec[i] <- p
}
result <- data.frame(cbind(c(1:50), pvalue.vec))
colnames(result) <- c("vgene.idx", "pvalue")
result
for (i in 1:13) {
sub <- get(paste0("subj", i))
out <- SKATBinary(sub, obj.s, kernel = "linear.weighted")
p <- out$p.value
pval[i] <- p
}
jres <- data.frame(cbind(c(1:13), pval))
colnames(jres) <- c("jgene.idx", "p-value")
jres
# v gene
pv <- result$pvalue
p.pv <- p.adjust(pv, method = p.adjust.methods, n = length(pv))
pv.res <- data.frame(cbind(c(1:50), p.pv))
pv.res
# j gene
pj <- jres$`p-value`
p.pj <- p.adjust(pj, method = p.adjust.methods, n = length(pj))
pj.res <- data.frame(cbind(c(1:13), p.pj))
pj.res
result
gene$Y <- Y
# dataframe
dfull <- gene[3:630]
# v gene
dfv16 <- gene[, colv16]
dfv26 <- gene[, colv26]
dfv27 <- gene[, colv27]
# j gene
dfj7 <- gene[, colj7]
dfj9 <- gene[, colj9]
dfj10 <- gene[, colj10]
# pca res
pcaFull <- prcomp(dfull, scale. = TRUE)
# v gene
pcav16 <- prcomp(dfv16, scale. = TRUE)
pcav26 <- prcomp(dfv26, scale. = TRUE)
pcav27 <- prcomp(dfv27, scale. = TRUE)
# j gene
pcaj7 <- prcomp(dfj7, scale. = TRUE)
pcaj9 <- prcomp(dfj9, scale. = TRUE)
pcaj10 <- prcomp(dfj10, scale. = TRUE)
# plot
autoplot(pcav16, data = gene, colour = 'Y')
autoplot(pcav26, data = gene, colour = 'Y')
autoplot(pcav27, data = gene, colour = 'Y')
autoplot(pcaj7, data = gene, colour = 'Y')
autoplot(pcaj9, data = gene, colour = 'Y')
autoplot(pcaj10, data = gene, colour = 'Y')
autoplot(pcaFull, data = gene, colour = 'Y')
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(factoextra)
library(ggfortify)
library(ggplot2)
library(gridExtra)
library(psych)
library(readr)
library(readxl)
library(SKAT)
library(tidyr)
gene <- read_excel("~/TCR-Project/Datasets/Disease Data/fullgenes.xlsx")
attach(gene)
# v gene
stringv1 <- "TRBV10-1"
stringv2 <- "TRBV10-2"
stringv3 <- "TRBV10-3"
stringv4 <- "TRBV11-1"
stringv5 <- "TRBV11-2"
stringv6 <- "TRBV11-3"
stringv7 <- "TRBV12-1"
stringv8 <- "TRBV12-3"
stringv9 <- "TRBV12-4"
stringv10 <- "TRBV12-5"
stringv11 <- "TRBV13"
stringv12 <- "TRBV14"
stringv13 <- "TRBV15"
stringv14 <- "TRBV18"
stringv15 <- "TRBV19"
stringv16 <- "TRBV2"
stringv17 <- "TRBV20-1"
stringv18 <- "TRBV21-1"
stringv19 <- "TRBV23-1"
stringv20 <- "TRBV24-1"
stringv21 <- "TRBV25-1"
stringv22 <- "TRBV27"
stringv23 <- "TRBV28"
stringv24 <- "TRBV29-1"
stringv25 <- "TRBV3-2"
stringv26 <- "TRBV30"
stringv27 <- "TRBV4-1"
stringv28 <- "TRBV4-2"
stringv29 <- "TRBV4-3"
stringv30 <- "TRBV5-1"
stringv31 <- "TRBV5-3"
stringv32 <- "TRBV5-4"
stringv33 <- "TRBV5-5"
stringv34 <- "TRBV5-6"
stringv35 <- "TRBV5-7"
stringv36 <- "TRBV5-8"
stringv37 <- "TRBV6-1"
stringv38 <- "TRBV6-2"
stringv39 <- "TRBV6-3"
stringv40 <- "TRBV6-4"
stringv41 <- "TRBV6-5"
stringv42 <- "TRBV6-6"
stringv43 <- "TRBV6-7"
stringv44 <- "TRBV6-8"
stringv45 <- "TRBV6-9"
stringv46 <- "TRBV7-2"
stringv47 <- "TRBV7-3"
stringv48 <- "TRBV7-4"
stringv49 <- "TRBV7-5"
stringv50 <- "TRBV7-6"
# j gene
stringj1 <- "TRBJ1-1"
stringj2 <- "TRBJ1-2"
stringj3 <- "TRBJ1-3"
stringj4 <- "TRBJ1-4"
stringj5 <- "TRBJ1-5"
stringj6 <- "TRBJ1-6"
stringj7 <- "TRBJ2-1"
stringj8 <- "TRBJ2-2"
stringj9 <- "TRBJ2-3"
stringj10 <- "TRBJ2-4"
stringj11 <- "TRBJ2-5"
stringj12 <- "TRBJ2-6"
stringj13 <- "TRBJ2-7"
# v gene
colv1 <- grep(stringv1, names(gene), value = TRUE)
colv2 <- grep(stringv2, names(gene), value = TRUE)
colv3 <- grep(stringv3, names(gene), value = TRUE)
colv4 <- grep(stringv4, names(gene), value = TRUE)
colv5 <- grep(stringv5, names(gene), value = TRUE)
colv6 <- grep(stringv6, names(gene), value = TRUE)
colv7 <- grep(stringv7, names(gene), value = TRUE)
colv8 <- grep(stringv8, names(gene), value = TRUE)
colv9 <- grep(stringv9, names(gene), value = TRUE)
colv10 <- grep(stringv10, names(gene), value = TRUE)
colv11 <- grep(stringv11, names(gene), value = TRUE)
colv12 <- grep(stringv12, names(gene), value = TRUE)
colv13 <- grep(stringv13, names(gene), value = TRUE)
colv14 <- grep(stringv14, names(gene), value = TRUE)
colv15 <- grep(stringv15, names(gene), value = TRUE)
colv16 <- grep(stringv16, names(gene), value = TRUE)
colv17 <- grep(stringv17, names(gene), value = TRUE)
colv18 <- grep(stringv18, names(gene), value = TRUE)
colv19 <- grep(stringv19, names(gene), value = TRUE)
colv20 <- grep(stringv20, names(gene), value = TRUE)
colv21 <- grep(stringv21, names(gene), value = TRUE)
colv22 <- grep(stringv22, names(gene), value = TRUE)
colv23 <- grep(stringv23, names(gene), value = TRUE)
colv24 <- grep(stringv24, names(gene), value = TRUE)
colv25 <- grep(stringv25, names(gene), value = TRUE)
colv26 <- grep(stringv26, names(gene), value = TRUE)
colv27 <- grep(stringv27, names(gene), value = TRUE)
colv28 <- grep(stringv28, names(gene), value = TRUE)
colv29 <- grep(stringv29, names(gene), value = TRUE)
colv30 <- grep(stringv30, names(gene), value = TRUE)
colv31 <- grep(stringv31, names(gene), value = TRUE)
colv32 <- grep(stringv32, names(gene), value = TRUE)
colv33 <- grep(stringv33, names(gene), value = TRUE)
colv34 <- grep(stringv34, names(gene), value = TRUE)
colv35 <- grep(stringv35, names(gene), value = TRUE)
colv36 <- grep(stringv36, names(gene), value = TRUE)
colv37 <- grep(stringv37, names(gene), value = TRUE)
colv38 <- grep(stringv38, names(gene), value = TRUE)
colv39 <- grep(stringv39, names(gene), value = TRUE)
colv40 <- grep(stringv40, names(gene), value = TRUE)
colv41 <- grep(stringv41, names(gene), value = TRUE)
colv42 <- grep(stringv42, names(gene), value = TRUE)
colv43 <- grep(stringv43, names(gene), value = TRUE)
colv44 <- grep(stringv44, names(gene), value = TRUE)
colv45 <- grep(stringv45, names(gene), value = TRUE)
colv46 <- grep(stringv46, names(gene), value = TRUE)
colv47 <- grep(stringv47, names(gene), value = TRUE)
colv48 <- grep(stringv48, names(gene), value = TRUE)
colv49 <- grep(stringv49, names(gene), value = TRUE)
colv50 <- grep(stringv50, names(gene), value = TRUE)
# j gene
colj1 <- grep(stringj1, names(gene), value = TRUE)
colj2 <- grep(stringj2, names(gene), value = TRUE)
colj3 <- grep(stringj3, names(gene), value = TRUE)
colj4 <- grep(stringj4, names(gene), value = TRUE)
colj5 <- grep(stringj5, names(gene), value = TRUE)
colj6 <- grep(stringj6, names(gene), value = TRUE)
colj7 <- grep(stringj7, names(gene), value = TRUE)
colj8 <- grep(stringj8, names(gene), value = TRUE)
colj9 <- grep(stringj9, names(gene), value = TRUE)
colj10 <- grep(stringj10, names(gene), value = TRUE)
colj11 <- grep(stringj11, names(gene), value = TRUE)
colj12 <- grep(stringj12, names(gene), value = TRUE)
colj13 <- grep(stringj13, names(gene), value = TRUE)
set.na1 <- c(22)
set.na2 <- c(94:109)
Y1 <- gene$Y1
Y1[set.na1] <- "active"
Y1[set.na2] <- "healthy"
set.na1 <- c(22)
set.na2 <- c(94:109)
Y1 <- gene$Y1
Y1[set.na1] <- "recovered"
Y1[set.na2] <- "healthy"
# subsets
actRec <- subset(gene, Y1 == "active" | Y1 == "recovered")
Y.ar <- rep(0, length(actRec$Y1))
Y.ar[which(actRec$Y1 == "active")] = 1
actHea <- subset(gene, Y1 == "active" | Y1 == "healthy")
Y.ah <- rep(0, length(actHea$Y1))
Y.ah[which(actHea$Y1 == "active")] = 1
recHea <- subset(gene, Y1 == "recovered" | Y1 == "healthy")
Y.rh <- rep(0, length(recHea$Y1))
Y.rh[which(recHea$Y1 == "recovered")] = 1
# null models
obj.ar <- SKAT_Null_Model(Y.ar ~ 1, out_type = "D")
obj.ah <- SKAT_Null_Model(Y.ah ~ 1, out_type = "D")
obj.rh <- SKAT_Null_Model(Y.rh ~ 1, out_type = "D")
p.ar <- rep(0,50)
ar.val <- rep(0,13)
# loop
for (i in 1:50) {
col.idx <- get(paste0("colv", i,sep=""))
sub <- as.matrix(actRec[,col.idx])
out <- SKATBinary(sub, obj.ar, kernel = "linear.weighted")
p <- out$p.value
p.ar[i] <- p
}
ar.v <- data.frame(cbind(c(1:50), p.ar))
colnames(ar.v) <- c("vgene.idx","pvalue")
ar.v
ar.v
for (i in 1:13) {
col.idx <- get(paste0("colj", i,sep=""))
sub <- as.matrix(actRec[,col.idx])
out <- SKATBinary(sub, obj.ar, kernel = "linear.weighted")
p <- out$p.value
ar.val[i] <- p
}
ar.j <- data.frame(cbind(c(1:13),ar.val))
colnames(ar.j) <- c("jgene.idx","p-value")
ar.j
p.ah <- rep(0,50)
ah.val <- rep(0,13)
# loop
for (i in 1:50) {
col.idx <- get(paste0("colv", i,sep=""))
sub <- as.matrix(actHea[,col.idx])
out <- SKATBinary(sub, obj.ah, kernel = "linear.weighted")
p <- out$p.value
p.ah[i] <- p
}
ah.v <- data.frame(cbind(c(1:50), p.ah))
colnames(ah.v) <- c("vgene.idx","pvalue")
ah.v
ah.v
for (i in 1:13) {
col.idx <- get(paste0("colj", i,sep=""))
sub <- as.matrix(actHea[,col.idx])
out <- SKATBinary(sub, obj.ah, kernel = "linear.weighted")
p <- out$p.value
ah.val[i] <- p
}
ah.j <- data.frame(cbind(c(1:13),ah.val))
colnames(ah.j) <- c("jgene.idx","p-value")
ah.j
ah.j
p.rh <- rep(0,50)
rh.val <- rep(0,13)
# loop
for (i in 1:50) {
col.idx <- get(paste0("colv", i,sep=""))
sub <- as.matrix(recHea[,col.idx])
out <- SKATBinary(sub, obj.rh, kernel = "linear.weighted")
p <- out$p.value
p.rh[i] <- p
}
rh.v <- data.frame(cbind(c(1:50), p.rh))
colnames(rh.v) <- c("vgene.idx","pvalue")
rh.v
rh.v
for (i in 1:13) {
col.idx <- get(paste0("colj", i,sep=""))
sub <- as.matrix(recHea[,col.idx])
out <- SKATBinary(sub, obj.rh, kernel = "linear.weighted")
p <- out$p.value
rh.val[i] <- p
}
rh.j <- data.frame(cbind(c(1:13),rh.val))
colnames(rh.j) <- c("jgene.idx","p-value")
rh.j
# v gene
ar.pv <- ar.v$pvalue
ar.paV <- p.adjust(ar.pv, method = p.adjust.methods, n = length(ar.pv))
ar.vRes <- data.frame(cbind(c(1:50), ar.paV))
colnames(ar.vRes) <- c("vgene.idx","p-value")
ar.vRes
ar.vRes
# j gene
ar.pj <- ar.j$`p-value`
ar.paJ <- p.adjust(ar.pj, method = p.adjust.methods, n = length(ar.pj))
ar.jRes <- data.frame(cbind(c(1:13), ar.paJ))
colnames(ar.jRes) <- c("jgene.idx","p-value")
ar.jRes
# v gene
ah.pv <- ah.v$pvalue
ah.paV <- p.adjust(ah.pv, method = p.adjust.methods, n = length(ah.pv))
ah.vRes <- data.frame(cbind(c(1:50), ah.paV))
colnames(ah.vRes) <- c("vgene.idx","p-value")
ah.vRes
ah.vRes
# j gene
ah.pj <- ah.j$`p-value`
ah.paJ <- p.adjust(ah.pj, method = p.adjust.methods, n = length(ah.pj))
ah.jRes <- data.frame(cbind(c(1:13), ah.paJ))
colnames(ah.jRes) <- c("jgene.idx","p-value")
ah.jRes
# v gene
rh.pv <- rh.v$pvalue
rh.paV <- p.adjust(rh.pv, method = p.adjust.methods, n = length(rh.pv))
rh.vRes <- data.frame(cbind(c(1:50), rh.paV))
colnames(rh.vRes) <- c("vgene.idx","p-value")
rh.vRes
rh.vRes
# j gene
rh.pj <- rh.j$`p-value`
rh.paJ <- p.adjust(rh.pj, method = p.adjust.methods, n = length(rh.pj))
rh.jRes <- data.frame(cbind(c(1:13), rh.paJ))
colnames(rh.jRes) <- c("jgene.idx","p-value")
rh.jRes
names(gene)
# dataframe
gene$Y1 <- Y1
dfull <- gene[2:677]
# v gene
ar.v <- actRec[, c(colv1, colv2, colv3, colv4, colv5, colv6, colv8, colv10,
colv11, colv12, colv13, colv14, colv15, colv16, colv17,
colv18, colv19, colv20, colv21, colv22, colv23, colv24,
colv25, colv27, colv29, colv30, colv31, colv32, colv33,
colv34, colv35, colv36, colv37, colv39, colv40, colv41,
colv42, colv44, colv45, colv46, colv47, colv48, colv49,
colv50)]
ah.v <- actHea[, colv37]
rh.v <- recHea[, c(colv3, colv10, colv15, colv16, colv18, colv19, colv24,
colv27, colv30, colv31, colv33, colv36, colv40, colv46,
colv47, colv49)]
# j gene
ar.j <- actRec[, c(colj1, colj2, colj3, colj4, colj5, colj6, colj7, colj8,
colj9, colj10, colj11, colj12, colj13)]
ar.j <- ar.j[, which(apply(ar.j, 2, var) != 0)]
rh.j <- recHea[, c(colj1, colj2, colj3, colj4, colj6, colj7, colj9, colj10,
colj12, colj13)]
rh.j <- rh.j[, which(apply(rh.j, 2, var) != 0)]
# pca res
pcaFull <- prcomp(dfull, scale. = TRUE)
# v gene
pca.arV <- prcomp(ar.v, scale. = TRUE)
pca.ahV <- prcomp(ah.v, scale. = TRUE)
pca.rhV <- prcomp(rh.v, scale. = TRUE)
# j gene
pca.arJ <- prcomp(ar.j, scale. = TRUE)
pca.ahJ <- prcomp(ah.j, scale. = TRUE)
pca.rhJ <- prcomp(rh.j, scale. = TRUE)
# plot
#ARplotV <- autoplot(pca.arV, data = actRec, colour = 'Y1')
#AHplotV <- autoplot(pca.ahV, data = actHea, colour = 'Y1')
#RHplotV <- autoplot(pca.rhV, data = recHea, colour = 'Y1')
#ARplotJ <- autoplot(pca.arJ, data = actRec, colour = 'Y1')
#AHplotJ <- autoplot(pca.ahJ, data = actHea, colour = 'Y1')
#RHplotJ <- autoplot(pca.rhJ, data = recHea, colour = 'Y1')
autoplot(pca.arV, data = actRec, colour = 'Y1')
autoplot(pca.ahV, data = actHea, colour = 'Y1')
autoplot(pca.rhV, data = recHea, colour = 'Y1')
autoplot(pca.arJ, data = actRec, colour = 'Y1')
autoplot(pca.ahJ, data = actHea, colour = 'Y1')
# plot
#ARplotV <- autoplot(pca.arV, data = actRec, colour = 'Y1')
#AHplotV <- autoplot(pca.ahV, data = actHea, colour = 'Y1')
#RHplotV <- autoplot(pca.rhV, data = recHea, colour = 'Y1')
#ARplotJ <- autoplot(pca.arJ, data = actRec, colour = 'Y1')
#AHplotJ <- autoplot(pca.ahJ, data = actHea, colour = 'Y1')
#RHplotJ <- autoplot(pca.rhJ, data = recHea, colour = 'Y1')
autoplot(pca.arV, data = actRec, colour = 'Y1')
autoplot(pca.ahV, data = actHea, colour = 'Y1')
autoplot(pca.rhV, data = recHea, colour = 'Y1')
autoplot(pca.arJ, data = actRec, colour = 'Y1')
autoplot(pca.rhJ, data = recHea, colour = 'Y1')
autoplot(pcaFull, data = gene, colour = 'Y1')
# arrange
#grid.arrange(ARplotV, ARplotJ, ncol = 2)
#grid.arrange(AHplotV, AHplotJ, ncol = 2)
#grid.arrange(RHplotV, RHplotJ, ncol = 2)
